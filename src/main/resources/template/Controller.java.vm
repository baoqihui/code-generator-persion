package ${package}.${moduleName}.controller;
import java.io.IOException;
import java.util.List;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;

import org.springframework.web.multipart.MultipartFile;
import javax.servlet.http.HttpServletResponse;


import java.util.Map;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import ${package}.${moduleName}.util.EasyPoiExcelUtil;
import ${package}.${moduleName}.model.${className};
import ${package}.${moduleName}.service.I${className}Service;
import ${package}.${moduleName}.common.model.PageResult;
import ${package}.${moduleName}.common.model.Result;

/**
 * ${comments}
 *
 * @author ${author}
 * @date ${datetime}
 */
@Slf4j
@CrossOrigin
@RestController
@Api(tags = "${comments}")
@RequestMapping("${classname}")
@AllArgsConstructor
public class ${className}Controller {
    private I${className}Service ${classname}Service;

    /**
     * 列表
     */
    @ApiOperation(value = "查询列表")
    @PostMapping("/list")
    public Result<PageResult> list(@RequestBody Map<String, Object> params) {
        Page<Map> list= ${classname}Service.findList(params);
        return Result.succeed(PageResult.restPage(list),"查询成功");
    }

    /**
     * 查询
     */
    @ApiOperation(value = "查询")
    @PostMapping("/sel/{id}")
    public Result find${className}ById(@PathVariable Long ${pk.attrname}) {
        ${className} model = ${classname}Service.getById(${pk.attrname});
        return Result.succeed(model, "查询成功");
    }

    /**
     * 新增or更新
     */
    @ApiOperation(value = "新增or更新")
    @PostMapping("/save")
    public Result save(@RequestBody ${className} ${classname}) {
        ${classname}Service.saveOrUpdate(${classname});
        return Result.succeed("保存成功");
    }

    /**
     * 批量新增or更新
     */
    @ApiOperation(value = "批量新增or更新")
    @PostMapping("/saveBatch")
    public Result saveBatch(@RequestBody Map<String,List<${className}>> map) {
        List<${className}> models = map.get("models");
        ${classname}Service.saveOrUpdateBatch(models);
        return Result.succeed("保存成功");
    }

    /**
     * 删除
     */
    @ApiOperation(value = "批量删除")
    @PostMapping("/del")
    public Result delete(@RequestBody Map<String,List<Long>> map) {
        List<Long> ids = map.get("ids");
        ${classname}Service.removeByIds(ids);
        return Result.succeed("删除成功");
    }
    
    /**
     * 导入
     */
    @ApiOperation(value = "导入")
    @PostMapping("/leadIn")
    public  Result leadIn(MultipartFile excel) throws Exception {
        int rowNum = 0;
        if (!excel.isEmpty()) {
            List<${className}> list = EasyPoiExcelUtil.importExcel(excel, 1, 1, ${className}.class);
            rowNum = list.size();
            if (rowNum > 0) {
                list.forEach(u -> {
                        ${classname}Service.save(u);
                });
                return Result.succeed("成功导入信息"+rowNum+"行数据");
            }
        }
        return Result.failed("导入失败");
    }
    
    /**
     * 导出（传入ids数组，选择指定id）
     */
    @ApiOperation(value = "导出（传入ids数组，选择指定id）")
    @PostMapping("/leadOut")
    public void leadOut(@RequestBody Map<String,List<Long>> map,HttpServletResponse response) throws IOException {
        List<Long> ids = map.get("ids");
        List<${className}> ${classname}List = ids==null||ids.isEmpty()? ${classname}Service.list(new QueryWrapper<>()):(List)${classname}Service.listByIds(ids);
        //导出操作
        EasyPoiExcelUtil.exportExcel(${classname}List, "${comments}导出", "${comments}导出", ${className}.class, "${classname}.xls", response);
    }
}
