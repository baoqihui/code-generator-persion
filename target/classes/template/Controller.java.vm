package ${package}.${moduleName}.controller;

import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;

import ${package}.${moduleName}.model.${className};
import ${package}.${moduleName}.service.I${className}Service;
import ${package}.${moduleName}.common.model.PageResult;
import ${package}.${moduleName}.common.model.Result;

/**
 * ${comments}
 *
 * @author ${author}
 * @date ${datetime}
 */
@Slf4j
@RestController
@Api(tags = "${comments}")
public class ${className}Controller {
    @Autowired
    private I${className}Service ${classname}Service;

    /**
     * 列表
     */
    @ApiOperation(value = "查询列表(此接口请使用PostMan测试)")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "page", value = "页码数", required = false, dataType = "Integer"),
            @ApiImplicitParam(name = "limit", value = "当前页数量", required = false, dataType = "Integer")
    })
    @GetMapping("/${classname}")
    public PageResult list(@RequestParam(required = false) Map<String, Object> params) {
        return ${classname}Service.findList(params);
    }

    /**
     * 查询
     */
    @ApiOperation(value = "查询")
    @GetMapping("/${classname}/{id}")
    public Result findUserById(@PathVariable Long ${pk.attrname}) {
        ${className} model = ${classname}Service.getById(${pk.attrname});
        return Result.succeed(model, "查询成功");
    }

    /**
     * 新增or更新
     */
    @ApiOperation(value = "保存")
    @PostMapping("/${classname}")
    public Result save(@RequestBody ${className} ${classname}) {
        ${classname}Service.saveOrUpdate(${classname});
        return Result.succeed("保存成功");
    }

    /**
     * 删除
     */
    @ApiOperation(value = "删除")
    @DeleteMapping("/${classname}/{id}")
    public Result delete(@PathVariable Long ${pk.attrname}) {
        ${classname}Service.removeById(${pk.attrname});
        return Result.succeed("删除成功");
    }
    
    /**
     * 导入
     */
    @ApiOperation(value = "导入")
    @PostMapping("/${classname}/leadIn")
    public  Result leadIn(MultipartFile excel,String cuId) throws Exception {
        int rowNum = 0;
        if (!excel.isEmpty()) {
            List<${className}> list = ExcelUtil.importExcel(excel, 1, 1, ${className}.class);
            rowNum = list.size();
            if (rowNum > 0) {
                ${className} exist${className}=${classname}Service.getOne(new QueryWrapper<${className}>().eq("cu_id",cuId));
                if (exist${className}==null){
                    //无该用户信息
                    list.forEach(u -> {
                        u.setCuId(cuId);
                        ${classname}Service.save(u);
                    });
                    return Result.succeed("成功导入信息"+rowNum+"行数据");
                }else {
                    list.forEach(u -> {
                        u.setId(exist${className}.getId());
                        ${classname}Service.updateById(u);
                    });
                    return Result.succeed("成功更新信息"+rowNum+"行数据");
                }
            }
        }
        return Result.failed("导入失败");
    }
    
    /**
     * 导出
     */
    @ApiOperation(value = "导出")
    @PostMapping("/${classname}/leadOut")
    public void leadOut(String cuId, HttpServletResponse response) throws IOException {
        List<${className}> ${classname}s =new ArrayList<>();
        List<${className}> ${classname}List = ${classname}Service.list(new QueryWrapper<${className}>().eq("cu_id", cuId));
        if (${classname}List.isEmpty()) {${classname}s.add(${classname}Service.getById(0)); } else {
            for (${className} ${classname} : ${classname}List) {
                ${classname}s.add(${classname});
            }
        }
        //导出操作
        ExcelUtil.exportExcel(${classname}s, "${comments}导出", "${comments}导出", ${className}.class, "${classname}.xls", response);

    }
}
